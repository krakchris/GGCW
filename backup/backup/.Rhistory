shiny::runApp()
install.packages("shinydashboard")
runApp()
runExample("08_html")
runApp('~/try_2')
runApp()
runApp()
runApp()
runApp('~/iets')
runApp('~/iets')
runApp('~/try_2')
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
fileName <- 'www/working_scorecard_v1.html'
readChar(fileName, file.info(fileName)$size)
html <- readChar(fileName, file.info(fileName)$size)
runApp()
runApp()
runApp()
runApp()
fileName <- 'www/working_scorecard_v1.html'
html <- readChar(fileName, file.info(fileName)$size)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
library(feather)
install.packages("feather")
library(feather)
library(feather)
install.packages("pkgconfig")
library(feather)
df <- read_feather(../data/Amsterdam_score.feather)
df <- read_feather("../data/Amsterdam_score.feather")
View(df)
runApp()
runApp()
runApp()
getColor(df$Temp_LAI)
getColor <- function(quakes) {
sapply(quakes$mag, function(mag) {
if(mag < 1) {
"#E50006"
} else if(mag <= 2) {
"#AB2F08"
} else if(mag <= 3) {
"#725F0A"
} else if(mag <= 4) {
"#398F0C"
} else {
"#00BF0F"
} })
}
getColor(df$Temp_LAI)
getColor(df.Temp_LAI)
getColor(df)
sapply(df$Soc_Grey)
getColor <- function(input) {
sapply(input, function(input) {
if(input < 1) {
"#E50006"
} else if(input <= 2) {
"#AB2F08"
} else if(input <= 3) {
"#725F0A"
} else if(input <= 4) {
"#398F0C"
} else {
"#00BF0F"
} })
}
getColor(df$Temp_LAI)
df$Temp_LAI
View(df)
getColor(df$Soc_Amen)
runApp()
df$name
type(df$name)
df1 <- read.csv(textConnection(
"Name,Lat,Long
Samurai Noodle,47.597131,-122.327298
Kukai Ramen,47.6154,-122.327157
Tsukushinbo,47.59987,-122.326726"))
df$name <- as.factor(df$name)
runApp()
runApp()
runApp()
runApp()
library(htmltools)
runApp()
runApp()
runApp()
runApp()
mean(df$Y_wgs)
mean(df[1])
df[1,]
df[2,]
View(df)
df[6:8,]
df[,6:8]
df[,[6:8,10:14]
mean(df[,6:8])
mean(df[,6:8],1)
mean(df[,6:8],2)
data.frame(ID=df[,1], Means=rowMeans(df[,-1]))
df[,1]
runApp()
data.frame(ID=df$OSM_id, Means=rowMeans(DF[,c(6,7,8,10,11,12,13,14)]))
data.frame(ID=df$OSM_id, Means=rowMeans(df[,c(6,7,8,10,11,12,13,14)]))
runApp()
city = "Amsterdam"
library(feather)
df <- read_feather("../data/Amsterdam_score.feather")
df$mean_score  <- data.frame(ID=df$OSM_id, Means=rowMeans(df[,c(6,7,8,10,11,12,13,14)]))
df$name <- as.factor(df$name)
getColor <- function(input) {
sapply(input, function(input) {
if(input < 1) {
"#E50006"
} else if(input <= 2) {
"#AB2F08"
} else if(input <= 3) {
"#725F0A"
} else if(input <= 4) {
"#398F0C"
} else {
"#00BF0F"
} })
}
fileName <- 'www/index_v2.html'
html <- readChar(fileName, file.info(fileName)$size)
digit <- 'hallomensen'
header <- dashboardHeader(title = city,titleWidth = 300,disable = TRUE)
sidebar <- dashboardSidebar( actionButton("recalc", "New points"),disable = TRUE)
body <- dashboardBody(
fluidRow(selectInput("City", "City:",
c("Amsterdam" = "cyl",
"Houston" = "am",
"Rio de Janeiro" = "gear"))),
fluidRow(
box(  leafletOutput("mymap",height = "500"), background = "black", width = 12)),
# Also add some custom CSS to make the title background area the same
# color as the rest of the header.
tags$head(tags$link(rel = "stylesheet", type = "text/css", href = "style.css")
),
tags$div(
HTML(sprintf(html , "100%", "50% 100%"))
)
)
dashboardPage(header, sidebar, body)
ui <- dashboardPage( header,sidebar,body
)
r_colors <- rgb(t(col2rgb(colors()) / 255))
names(r_colors) <- colors()
server <- function(input, output, session) {
points <- eventReactive(input$recalc, {
cbind(df$X_wgs,df$Y_wgs)
}, ignoreNULL = FALSE)
output$mymap <- renderLeaflet({
leaflet(options = leafletOptions(zoomControl = FALSE)) %>%
addProviderTiles(providers$CartoDB.DarkMatter,
options = providerTileOptions(noWrap = FALSE)
) %>%
addCircleMarkers(data = points(),color = getColor(df$mean_score),
stroke = FALSE, fillOpacity = 1, label = htmlEscape(df$name))
})
}
shinyApp(ui, server)
runApp()
getColor(df$mean_score)
df$mean_score  <- rowMeans(df[,c(6,7,8,10,11,12,13,14)])
getColor(df$mean_score)
runApp()
max(df$mean_score)
range(c(min(df$mean_score), -5, max(df$mean_score)))
range(4,c(min(df$mean_score), max(df$mean_score)))
range(c(min(df$mean_score), max(df$mean_score)))
range(1,c(min(df$mean_score), max(df$mean_score)))
seq(min(df$mean_score), max(df$mean_score)-0.1, length.out=5)
seq(min(df$mean_score)+0.1, max(df$mean_score)-0.1, length.out=5)
c_1, c_2, <- seq(min(df$mean_score)+0.1, max(df$mean_score)-0.1, length.out=5)
c_1, c_2 <- seq(min(df$mean_score)+0.1, max(df$mean_score)-0.1, length.out=5)
cut_values <- seq(min(df$mean_score)+0.1, max(df$mean_score)-0.1, length.out=5)
cut_values[1]
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
